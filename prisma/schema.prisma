generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // Port 6543 - Transaction pool (runtime)
  directUrl = env("DIRECT_URL") // Port 5432 - Direct connection (migrations)
}

// =====================
// Enums
// =====================

enum Role {
  client
  driver
  admin
}

enum AccountStatus {
  active
  inactive
  banned
}

enum RoomTypeName {
  SINGLE
  DOUBLE
  DELUXE
  SUITE
}

enum BookingStatus {
  PENDING_DRIVER_ACCEPTANCE
  ACCEPTED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REJECTED
}

enum HotelBookingStatus {
  PENDING_PAYMENT
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
}

enum CurrencyCode {
  usd
  pkr
}

enum PaymentStatus {
  requires_payment
  completed
  refunded
}

enum DisputeStatus {
  pending
  resolved
  rejected
}

enum CancellationActor {
  client
  driver
  admin
}

enum DocumentType {
  license
  cnic
  vehicle_registration
  insurance
  other
}

enum DocumentStatus {
  pending
  approved
  rejected
}

enum TransmissionType {
  manual
  automatic
}

enum FuelType {
  petrol
  diesel
  electric
  hybrid
}

enum NotificationType {
  booking_request
  booking_accepted
  booking_rejected
  booking_confirmed
  trip_started
  trip_completed
  payment_received
  driver_verification
  dispute_raised
  dispute_resolved
}

// =====================
// Core Tables
// =====================

model City {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  region     String
  created_at DateTime @default(now())

  users  User[]
  hotels Hotel[]

  @@index([region])
}

model CarModel {
  id         Int      @id @default(autoincrement())
  make       String
  model      String
  created_at DateTime @default(now())

  cars Car[]

  @@unique([make, model])
}

model User {
  id            Int           @id @default(autoincrement())
  full_name     String
  email         String        @unique
  password_hash String
  role          Role
  city_id       Int
  status        AccountStatus @default(active)
  created_at    DateTime      @default(now())

  // Relations
  city              City                  @relation(fields: [city_id], references: [id])
  client            Client?
  driver            Driver?
  admin             Admin?
  hotelBookings     HotelBooking[]        @relation("UserHotelBookings")
  carBookings       CarBooking[]          @relation("UserCarBookings")
  payments          PaymentTransaction[]
  notifications     Notification[]
  recognitions      MonumentRecognition[]
  monumentExports   MonumentExportLog[]
  chatMessages      ChatMessage[]
  reviewedDocuments DriverDocument[]      @relation("DocumentReviewer")

  @@index([city_id])
  @@index([status])
  @@index([role, status])
}

model Client {
  id         Int      @id @default(autoincrement())
  user_id    Int      @unique
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Admin {
  id         Int      @id @default(autoincrement())
  user_id    Int      @unique
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Driver {
  id                 Int       @id @default(autoincrement())
  user_id            Int       @unique
  is_verified        Boolean   @default(false)
  stripe_account_id  String?   @unique
  verification_notes String?
  verified_at        DateTime?
  created_at         DateTime  @default(now())
  updated_at         DateTime  @default(now()) @updatedAt

  user      User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  cars      Car[]
  ratings   DriverRating[]
  documents DriverDocument[]

  @@index([is_verified])
}

model DriverRating {
  id             Int       @id @default(autoincrement())
  driver_id      Int
  platform       String // e.g., "uber", "careem", "indrive"
  rating         Decimal   @db.Decimal(3, 2)
  screenshot_url String?
  verified_at    DateTime?
  created_at     DateTime  @default(now())

  driver Driver @relation(fields: [driver_id], references: [id], onDelete: Cascade)

  @@index([driver_id])
}

model DriverDocument {
  id               Int            @id @default(autoincrement())
  driver_id        Int
  document_type    DocumentType
  document_url     String
  status           DocumentStatus @default(pending)
  rejection_reason String?
  uploaded_at      DateTime       @default(now())
  reviewed_at      DateTime?
  reviewed_by      Int? // Admin user_id who reviewed

  driver   Driver @relation(fields: [driver_id], references: [id], onDelete: Cascade)
  reviewer User?  @relation("DocumentReviewer", fields: [reviewed_by], references: [id])

  @@index([driver_id])
  @@index([status])
}

model Hotel {
  id          Int      @id @default(autoincrement())
  name        String
  city_id     Int
  description String?  @db.Text
  address     String?
  star_rating Int?     @default(4)
  amenities   Json?    @default("[]")
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  city          City            @relation(fields: [city_id], references: [id])
  images        HotelImage[]
  roomTypes     HotelRoomType[]
  hotelBookings HotelBooking[]

  @@index([city_id, star_rating])
  @@index([is_active])
  @@index([star_rating])
  @@index([created_at])
  @@map("hotels")
}

model HotelImage {
  id            Int      @id @default(autoincrement())
  hotel_id      Int
  image_url     String
  public_id     String? // Cloudinary public ID for deletion
  display_order Int
  created_at    DateTime @default(now())

  hotel Hotel @relation(fields: [hotel_id], references: [id], onDelete: Cascade)

  @@index([hotel_id, display_order])
  @@index([public_id])
  @@map("hotel_images")
}

model HotelRoomType {
  id            Int          @id @default(autoincrement())
  hotel_id      Int
  name          RoomTypeName
  description   String?      @db.Text
  max_occupancy Int
  total_rooms   Int
  base_price    Decimal      @db.Decimal(10, 2)
  amenities     Json?        @default("[]")
  images        Json?        @default("[]")
  is_active     Boolean      @default(true)
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt

  hotel         Hotel          @relation(fields: [hotel_id], references: [id], onDelete: Cascade)
  hotelBookings HotelBooking[]

  @@index([hotel_id])
  @@index([hotel_id, name])
  @@index([base_price])
  @@map("hotel_room_types")
}

model Car {
  id                   Int              @id @default(autoincrement())
  driver_id            Int
  car_model_id         Int
  seats                Int
  base_price_per_day   Decimal          @db.Decimal(10, 2)
  distance_rate_per_km Decimal          @db.Decimal(10, 2)
  transmission         TransmissionType
  fuel_type            FuelType
  year                 Int
  color                String?
  license_plate        String?
  is_active            Boolean          @default(true)
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt

  driver      Driver       @relation(fields: [driver_id], references: [id], onDelete: Cascade)
  carModel    CarModel     @relation(fields: [car_model_id], references: [id])
  images      CarImage[]
  carBookings CarBooking[]

  @@index([driver_id])
  @@index([car_model_id])
  @@index([is_active])
  @@index([base_price_per_day])
  @@index([transmission])
  @@index([fuel_type])
}

model CarImage {
  id            Int      @id @default(autoincrement())
  car_id        Int
  image_url     String
  public_id     String? // Cloudinary public ID for deletion
  display_order Int
  created_at    DateTime @default(now())

  car Car @relation(fields: [car_id], references: [id], onDelete: Cascade)

  @@index([car_id, display_order])
  @@index([public_id])
}

// =====================
// Bookings & Payments (separated)
// =====================

model HotelBooking {
  id           Int                @id @default(autoincrement())
  user_id      Int
  hotel_id     Int
  room_type_id Int
  quantity     Int
  check_in     DateTime           @db.Date
  check_out    DateTime           @db.Date
  status       HotelBookingStatus
  total_amount Decimal            @db.Decimal(10, 2)
  currency     CurrencyCode
  created_at   DateTime           @default(now())
  updated_at   DateTime           @updatedAt

  user         User                 @relation("UserHotelBookings", fields: [user_id], references: [id], onDelete: Cascade)
  hotel        Hotel                @relation(fields: [hotel_id], references: [id], onDelete: Cascade)
  room_type    HotelRoomType        @relation(fields: [room_type_id], references: [id])
  payments     PaymentTransaction[]
  dispute      Dispute?
  cancellation BookingCancellation?

  @@index([user_id, created_at])
  @@index([status])
  @@index([hotel_id, check_in])
}

model CarBooking {
  id                 Int           @id @default(autoincrement())
  user_id            Int
  car_id             Int
  pickup_location    String
  dropoff_location   String
  estimated_distance Decimal?      @db.Decimal(10, 2) // in km
  start_date         DateTime      @db.Date
  end_date           DateTime      @db.Date
  status             BookingStatus
  total_amount       Decimal       @db.Decimal(10, 2)
  driver_earnings    Decimal       @db.Decimal(10, 2)
  platform_fee       Decimal       @db.Decimal(10, 2)
  currency           CurrencyCode
  customer_notes     String?
  driver_notes       String?
  requested_at       DateTime      @default(now())
  accepted_at        DateTime?
  confirmed_at       DateTime?
  started_at         DateTime?
  completed_at       DateTime?
  created_at         DateTime      @default(now())
  updated_at         DateTime      @updatedAt

  user         User                 @relation("UserCarBookings", fields: [user_id], references: [id], onDelete: Cascade)
  car          Car                  @relation(fields: [car_id], references: [id], onDelete: Cascade)
  payments     PaymentTransaction[]
  dispute      Dispute?
  cancellation BookingCancellation?
  chat         Chat?

  @@index([user_id, created_at])
  @@index([status])
  @@index([car_id, start_date])
  @@index([start_date, end_date])
}

model PaymentTransaction {
  id                     Int           @id @default(autoincrement())
  booking_hotel_id       Int?
  booking_car_id         Int?
  user_id                Int
  amount                 Decimal       @db.Decimal(10, 2)
  currency               CurrencyCode
  application_fee_amount Decimal       @db.Decimal(10, 2)
  status                 PaymentStatus
  created_at             DateTime      @default(now())

  bookingHotel  HotelBooking?         @relation(fields: [booking_hotel_id], references: [id], onDelete: Cascade)
  bookingCar    CarBooking?           @relation(fields: [booking_car_id], references: [id], onDelete: Cascade)
  user          User                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  stripeDetails StripePaymentDetails?

  @@index([booking_hotel_id])
  @@index([booking_car_id])
  @@index([user_id])
  @@index([status, created_at])
}

model StripePaymentDetails {
  id                       Int      @id @default(autoincrement())
  payment_transaction_id   Int      @unique
  stripe_payment_intent_id String
  stripe_charge_id         String?
  stripe_account_id        String? // Connected account ID for driver
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt

  paymentTransaction PaymentTransaction @relation(fields: [payment_transaction_id], references: [id], onDelete: Cascade)

  @@index([stripe_payment_intent_id])
  @@index([stripe_charge_id])
}

// =====================
// Monuments, Disputes, Notifications
// =====================

model MonumentRecognition {
  id               Int      @id @default(autoincrement())
  user_id          Int
  image_url        String
  name             String
  confidence       Decimal  @db.Decimal(5, 4)
  wiki_snippet     String?
  raw_payload_json Json?
  created_at       DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  exports MonumentExportLog[]

  @@index([user_id, created_at])
}

model MonumentExportLog {
  id               Int      @id @default(autoincrement())
  user_id          Int
  monument_id      Int
  format           String   // 'pdf' or 'docx'
  file_url         String
  file_size        Int?      // in bytes
  created_at       DateTime @default(now())

  user     User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  monument MonumentRecognition @relation(fields: [monument_id], references: [id], onDelete: Cascade)

  @@index([user_id, created_at])
  @@index([monument_id])
}

model Dispute {
  id               Int               @id @default(autoincrement())
  booking_hotel_id Int?              @unique
  booking_car_id   Int?              @unique
  raised_by        CancellationActor
  description      String
  status           DisputeStatus
  created_at       DateTime          @default(now())
  resolved_at      DateTime?

  bookingHotel HotelBooking?       @relation(fields: [booking_hotel_id], references: [id], onDelete: Cascade)
  bookingCar   CarBooking?         @relation(fields: [booking_car_id], references: [id], onDelete: Cascade)
  attachments  DisputeAttachment[]

  @@index([status])
}

model DisputeAttachment {
  id          Int      @id @default(autoincrement())
  dispute_id  Int
  file_url    String
  file_type   String
  uploaded_at DateTime @default(now())

  dispute Dispute @relation(fields: [dispute_id], references: [id], onDelete: Cascade)

  @@index([dispute_id])
}

model BookingCancellation {
  id               Int               @id @default(autoincrement())
  booking_hotel_id Int?              @unique
  booking_car_id   Int?              @unique
  cancelled_by     CancellationActor
  reason           String
  refund_amount    Decimal           @db.Decimal(10, 2)
  created_at       DateTime          @default(now())

  bookingHotel HotelBooking? @relation(fields: [booking_hotel_id], references: [id], onDelete: Cascade)
  bookingCar   CarBooking?   @relation(fields: [booking_car_id], references: [id], onDelete: Cascade)
}

model Notification {
  id      Int              @id @default(autoincrement())
  user_id Int
  type    NotificationType
  title   String
  message String
  sent_at DateTime         @default(now())
  read_at DateTime?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, sent_at])
  @@index([user_id, read_at])
  @@index([type])
}

model Chat {
  id         Int      @id @default(autoincrement())
  booking_id Int      @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  booking  CarBooking    @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  messages ChatMessage[]

  @@index([booking_id])
}

model ChatMessage {
  id        Int       @id @default(autoincrement())
  chat_id   Int
  sender_id Int
  message   String
  sent_at   DateTime  @default(now())
  read_at   DateTime?

  chat   Chat @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  sender User @relation(fields: [sender_id], references: [id], onDelete: Cascade)

  @@index([chat_id, sent_at])
  @@index([sender_id])
}
